{"version":3,"file":"static/js/394.fc9bc526.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Users/User/User.module.css?cfea","components/Users/User/User.jsx","webpack://react-kabzda-1/./src/components/Users/Users.module.css?b9d0","components/Users/UsersFunc.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__JPgfI\",\"userLeft\":\"User_userLeft__EYIUU\",\"userPic\":\"User_userPic__zCQ6V\",\"userFollow\":\"User_userFollow__RHb6T\",\"userUnfollow\":\"User_userUnfollow__Etdqb\",\"button-loading\":\"User_button-loading__Nv2bD\",\"userRight\":\"User_userRight__3vMJJ\",\"userInfoTop\":\"User_userInfoTop__sqOUd\",\"name\":\"User_name__5v0xs\",\"location\":\"User_location__POdzQ\",\"userInfoBot\":\"User_userInfoBot__cibpb\",\"status\":\"User_status__I2zbH\"};","import React from \"react\";\r\nimport style from \"./User.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { usersAPI } from \"../../../api/api\";\r\nimport avatar from '../../../assets/img/avatar.png'\r\n\r\n\r\n\r\n\r\n\r\nexport default function User(props) {\r\n    const changeFollow = () => {\r\n        props.onChangeFollow(props.id);\r\n    }\r\n    // const onChangeFollow = () => {\r\n    //     usersAPI.followChange.followedCheck(props.id).then(response => {\r\n    //         let followStatus = response;\r\n    //         if (followStatus === false) {\r\n    //             usersAPI.followChange.following(props.id).then(response => {\r\n    //                 if (response.resultCode === 0) {\r\n    //                     props.followChanged(props.id, followStatus = true)\r\n    //                 }\r\n    //             })\r\n    //         } else if (followStatus === true) {\r\n    //             usersAPI.followChange.unfollowing(props.id).then(response => {\r\n    //                 if (response.resultCode === 0) {\r\n    //                     props.followChanged(props.id, followStatus = false)\r\n    //                 }\r\n    //             })\r\n    //         }\r\n    //     })\r\n    //     axios.get(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, { withCredentials: true }).then(response => {\r\n    //         let followStatus = response.data;\r\n    //         if (followStatus === false) {\r\n    //             axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, {}, { withCredentials: true, headers: { \"API-KEY\": '5edbe232-6099-4ee4-9271-b8f81afb7d19' } }).then(response => {\r\n    //                 if (response.data.resultCode === 0) {\r\n    //                     props.followChanged(props.id, followStatus = true)\r\n    //                 }\r\n    //             })\r\n    //         } else if (followStatus === true) {\r\n    //             axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, { withCredentials: true, headers: { \"API-KEY\": '5edbe232-6099-4ee4-9271-b8f81afb7d19' } }).then(response => {\r\n    //                 if (response.data.resultCode === 0) {\r\n    //                     props.followChanged(props.id, followStatus = false)\r\n    //                 }\r\n    //             })\r\n    //         }\r\n    //     });\r\n    //     props.followChanged(props.id)\r\n    // }\r\n\r\n    return (\r\n        <div className={style.user}>\r\n            <div className={style.userLeft}>\r\n                <NavLink to={`/profile/${props.id}`}>\r\n                    <img src={props.photo ? props.photo : avatar} alt=\"face\" className={style.userPic} />\r\n                </NavLink>\r\n                <button disabled={props.followingInProgress.some(id => id === props.id) || !props.isAuth} onClick={changeFollow} className={props.follow ? style.userFollow : style.userUnfollow} >{props.followingInProgress.some(id => id === props.id) ? 'Wait....' : `${props.follow ? 'Followed' : 'Unfollowed'}`}</button>\r\n            </div>\r\n            <div className={style.userRight}>\r\n                <div className={style.userInfoTop}>\r\n                    <p className={style.name}>{props.name}</p>\r\n                    <p className={style.location}>\r\n                        Локация\r\n                        {/* {props.location.city}<React.Fragment><br /></React.Fragment>{props.location.country} */}\r\n                    </p>\r\n                </div>\r\n                <div className={style.userInfoBot}>\r\n                    <p className={style.status}>\r\n                        {props.status || 'Without status'}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Users_title__QQ6Rv\",\"usersList\":\"Users_usersList__SIvU9\",\"selectedPage\":\"Users_selectedPage__i44Wh\",\"userWrappwer\":\"Users_userWrappwer__6AEIo\",\"moreUsers\":\"Users_moreUsers__ZteUZ\",\"pagesPaginator\":\"Users_pagesPaginator__XTYaY\",\"paginatorLeft\":\"Users_paginatorLeft__ly9FB\",\"prevPages\":\"Users_prevPages__56D7Y\",\"nextPages\":\"Users_nextPages__sEKSS\",\"paginatorRight\":\"Users_paginatorRight__aAQhg\",\"usersSelector\":\"Users_usersSelector__T9fiH\"};","import React, { useRef } from \"react\";\r\nimport User from \"./User/User\";\r\nimport style from \"./Users.module.css\"\r\nimport Preloader from \"../common/preloader/Preloader\";\r\n\r\n\r\n\r\nexport default function UsersFunc({ props, onChangePage, onShowMore, onChangeFollow, onUsingSelectors }) {\r\n    debugger;\r\n    const UserItem = props.usersInfo.map((item, index) => (<User\r\n        key={index}\r\n        id={item.id}\r\n        follow={item.followed}\r\n        name={item.name}\r\n        // location={item.location}\r\n        status={item.status}\r\n        followChanged={props.followChanged}\r\n        onChangeFollow={onChangeFollow}\r\n        followingInProgress={props.followingInProgress}\r\n        photo={item.photos.small}\r\n        isAuth={props.isAuth}\r\n    />))\r\n\r\n\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n\r\n    const goToThePage = () => {\r\n        let page = null;\r\n        if (inputValue.current.value > pagesCount) {\r\n            page = pagesCount\r\n        } else if (inputValue.current.value <= 0) {\r\n            page = 1\r\n        } else {\r\n            page = inputValue.current.value\r\n        }\r\n        onChangePage(Number(page))\r\n    }\r\n    const prevPagesButton = () => {\r\n        let page = null;\r\n        if (curPage < 6) {\r\n            page = curPage - 1\r\n        } else {\r\n            page = slicedPages[0] - 5\r\n        }\r\n        onChangePage(page)\r\n    }\r\n\r\n    let inputValue = React.createRef();\r\n    // console.log(inputValue.current.value)\r\n\r\n    const pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let slicedPages;\r\n    let curPage = props.curentPage;\r\n    slicedPages = pages.slice(curPage - 1, curPage + 4)\r\n    let Prel = [...Array(4)]\r\n\r\n\r\n    // SELECTOR SEARCH\r\n    let searchUsersInput = useRef('');\r\n    let selectorUsersInput = useRef(null)\r\n\r\n    const usingSelectors = (searchUsersInput, selectorUsersInput) => {\r\n        onUsingSelectors(searchUsersInput, selectorUsersInput)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className={style.title}>Users</h3>\r\n            <div className={style.pagesPaginator}>\r\n                <div className={style.paginatorLeft}>\r\n                    <button disabled={curPage === 1} onClick={prevPagesButton} className={style.prevPages}>Prev</button>\r\n                    {slicedPages.map((item, index) => <span onClick={(e) => { onChangePage(item) }} key={index} className={props.curentPage === item ? style.selectedPage : ''}>{item}</span>)}\r\n                    <button disabled={curPage + 5 > pagesCount} className={style.nextPages} onClick={(e) => { onChangePage(slicedPages[slicedPages.length - 1] + 1) }}>Next</button>\r\n                </div>\r\n                <div className={style.paginatorRight}>\r\n                    <input ref={inputValue} type=\"number\" placeholder=\"page...\" />\r\n                    <button onClick={goToThePage}>Go</button>\r\n                    <span>maxPage = {pagesCount}</span>\r\n                </div>\r\n                <div className={style.usersSelector}>\r\n                    <input placeholder=\"Name...\" ref={searchUsersInput} type=\"text\" />\r\n                    <select name=\"isFriends\" ref={selectorUsersInput}>\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Followed</option>\r\n                        <option value=\"false\">Unfollowed</option>\r\n                    </select>\r\n                    <button onClick={() => usingSelectors(searchUsersInput.current.value, selectorUsersInput.current.value)}>Find</button>\r\n                </div>\r\n            </div>\r\n            {props.isFetching\r\n                ?\r\n                Prel.map((item, index) => <Preloader key={index} />)\r\n                :\r\n                <>\r\n                    <div className={style.usersList}>\r\n                        <div className={style.userWrappwer}>\r\n                            {UserItem}\r\n                        </div>\r\n                        <button onClick={(e) => { onShowMore(pagesCount) }} className={style.moreUsers}>Show More</button>\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}","// import { createSelector } from \"reselect\"\r\n\r\n\r\n\r\n\r\nexport const getUsersInfo = (state) => {\r\n    return state.usersPage.userInfo\r\n}\r\n\r\n// Используем библиотеку reselect для создания сложных селекторов\r\n// чтобы не вызывать ререндер и пересчет значений,  если не изменились свойства необходимые именно этому селектору\r\n\r\n\r\n/*\r\n    По стандарту при любом измении стейта(даже той части кторую мы не используем в нашей компоненте), вызывается функция mapStateToProps,\r\n    внутри даной функции мы получаем по новому значения из стейта(даже если они не изменились) и сверяем их с предыдущими значениями, если что-то изменилось, то происходит перерендер.\r\n    И это не проблема если мы импользуем примитивные селекторы, которые просто принимают стэйт и возвращают в компоненту полученые значения. Но если наш селектор сложный, то есть,\r\n    перед тем как отправить данные в компоненту он выполняет какие-либо математические рассчеты, фильтрацию и т.д., то это довольно сильно влияет на производительность, и значительно\r\n    усложняет дебагинг, так как при любом измении стэйта будет вызываться mapStateToProps и будут происходить перерасчеты, фильтрации и т.д.И соответственно при использовании дебагинга\r\n    могут возникнуть проблемы, так как мы будем постоянно попадать в дебагер даже если необходимые данные из стейта не изменились.\r\n\r\n    Для исправления таких проблем существует библиотека reselect, которая позволяет создать селектор и установить для него зависимости. Зависимости позволяют выполнять перерассчеты\r\n    внутри сложного селектора, только при изменении самих же зависимостей. В качесте зависимостей зачастую выступают простые селекторы. \r\n\r\n    Например, у нас есть простой селектор который из стейта получает информацию о всех пользователях и имеет название getUsersInfo.\r\n    А нам в нашей компоненте необходимо получить только тех пользователей которые прошли фильтрацию по какому-либо свойству, например возрасту. Тут нам на помощь приходит \r\n    сложный селектор getUsersInfoAge, внутри которого при помощи зависимости в виде селектора(getUsersInfo) мы получаем сначала информацию о всех пользователях, после чего \r\n    отфильтровываем их по возрасту и возвращаем нашей компоненте. Данная фильтрация будет происходить только при первой загрузке компоненты\r\n    (то есть когда у нас еще нет предыдущего значения getUsersInfo) и при изменении значения getUsersInfo, во всех остальных случаях перерасчёт происходить не будет.\r\n*/\r\n\r\n// export const getUserInfoSuper = createSelector(getUsersInfo,getIsFetching, (usersInfo, isFetching) => {\r\n//     return usersInfo.filter(i => true)\r\n// })\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurentPage = (state) => {\r\n    return state.usersPage.curentPage\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFollowed = (state) => {\r\n    return state.usersPage.isFollowed\r\n}\r\nexport const getSearchInputValue = (state) => {\r\n    return state.usersPage.searchInputValue\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport { getUsersThunkCreator, changePageTC, showMoreTC, changeFollowTC, useSelectorsTC } from \"../../redux/users-reducer\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport UsersFunc from \"./UsersFunc\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { usersAPI } from \"../../api/api\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n    // getUserInfoSuper,\r\n    getUsersInfo,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getCurentPage,\r\n    getIsFetching,\r\n    getFollowingInProgress,\r\n    getIsFollowed,\r\n    getSearchInputValue\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nclass UsersAPIComponent extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.curentPage, this.props.pageSize);\r\n        // this.props.toggleIsFetching(true);\r\n        // usersAPI.getUsers(this.props.curentPage, this.props.pageSize).then(response => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(response.items);\r\n        //     this.props.setTotalUsersCount(response.totalCount);\r\n        // });\r\n    }\r\n\r\n\r\n    onChangePage = (newPage) => {\r\n        this.props.changePageTC(newPage, this.props.pageSize, this.props.isFollowed, this.props.searchInputValue);\r\n\r\n        // this.props.toggleIsFetching(true);\r\n        // this.props.setPage(newPage);\r\n        // usersAPI.getUsers(newPage, this.props.pageSize).then(response => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(response.items)\r\n        // });\r\n\r\n    }\r\n\r\n    onShowMore = async (pagesCount) => {\r\n        if (pagesCount / 2 < this.props.curentPage) {\r\n            await this.props.changePageTC(Math.ceil(this.props.curentPage / 2), this.props.pageSize);\r\n            this.props.showMoreTC(Math.ceil(this.props.curentPage), this.props.pageSize, this.props.isFollowed, this.props.searchInputValue);\r\n        } else {\r\n            this.props.showMoreTC(this.props.curentPage, this.props.pageSize, this.props.isFollowed, this.props.searchInputValue);\r\n        }\r\n\r\n\r\n        // this.props.showMore();\r\n        // this.props.toggleIsFetching(true);\r\n        // usersAPI.getUsers(this.props.curentPage, this.props.pageSize + 4).then(response => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(response.items)\r\n        // });\r\n    }\r\n\r\n    onUsingSelectors = (searchInputValue, isFollowed) => {\r\n        this.props.useSelectorsTC(searchInputValue, isFollowed, this.props.pageSize)\r\n    }\r\n\r\n    onChangeFollow = (id) => {\r\n        // правильный вариант в которым UI компонента не занимается запросами на сервер и не производит их менеджмент, а просто вызывает коллбэк функцию\r\n\r\n        this.props.changeFollowTC(id, this.props.isFollowed, this.props.pageSize)\r\n\r\n\r\n        // этот вариант так же является неправильным, так как хоть мы и вынесли запросы в DAL(data access layer), но все равно менеджмент респонсов происходит в UI ккомпоненте, что является некоректным\r\n\r\n        // this.props.toggleInFollowingProgress(true, id);\r\n        // usersAPI.followChange.followedCheck(id).then(response => {\r\n        //     let followStatus = response;\r\n        //     if (followStatus === false) {\r\n        //         usersAPI.followChange.following(id).then(response => {\r\n        //             if (response.resultCode === 0) {\r\n        //                 this.props.followChanged(id, followStatus = true);\r\n        //             }\r\n        //             this.props.toggleInFollowingProgress(false, id)\r\n        //         })\r\n        //     } else if (followStatus === true) {\r\n        //         usersAPI.followChange.unfollowing(id).then(response => {\r\n        //             if (response.resultCode === 0) {\r\n        //                 this.props.toggleInFollowingProgress(false, id)\r\n        //                 this.props.followChanged(id, followStatus = false);\r\n        //             }\r\n        //         })\r\n        //     }\r\n        // })\r\n\r\n\r\n        // снизу неправильный вариант, так как запросы на сервер не должны делаться из UI (функциональных или классовых компонентов) это функция BLL уровня, то есть Redux\r\n\r\n\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, { withCredentials: true }).then(response => {\r\n        //     let followStatus = response.data;\r\n        //     if (followStatus === false) {\r\n        //         axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, {}, { withCredentials: true, headers: { \"API-KEY\": '5edbe232-6099-4ee4-9271-b8f81afb7d19' } }).then(response => {\r\n        //             if (response.data.resultCode === 0) {\r\n        //                 props.followChanged(props.id, followStatus = true)\r\n        //             }\r\n        //         })\r\n        //     } else if (followStatus === true) {\r\n        //         axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${props.id}`, { withCredentials: true, headers: { \"API-KEY\": '5edbe232-6099-4ee4-9271-b8f81afb7d19' } }).then(response => {\r\n        //             if (response.data.resultCode === 0) {\r\n        //                 props.followChanged(props.id, followStatus = false)\r\n        //             }\r\n        //         })\r\n        //     }\r\n        // });\r\n        // this.props.followChanged(id)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <UsersFunc props={this.props} onChangePage={this.onChangePage} onShowMore={this.onShowMore} onChangeFollow={this.onChangeFollow} onUsingSelectors={this.onUsingSelectors} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        // usersInfo: getUserInfoSuper(state), // при использовании библиотеки reselect мы можем создать сложный селектор который будет обновляться только при изменении входящих в него значений\r\n        usersInfo: getUsersInfo(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        curentPage: getCurentPage(state),\r\n        isFollowed: getIsFollowed(state),\r\n        searchInputValue: getSearchInputValue(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        isAuth: state.auth.isAuth\r\n\r\n        // usersInfo: state.usersPage.userInfo,\r\n        // pageSize: state.usersPage.pageSize,\r\n        // totalUsersCount: state.usersPage.totalUsersCount,\r\n        // curentPage: state.usersPage.curentPage,\r\n        // isFetching: state.usersPage.isFetching,\r\n        // followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         userInfo: state.usersPage.userInfo,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         curentPage: state.usersPage.curentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress,\r\n//     }\r\n// }\r\n\r\n// вариант развернутого кода в котором мы сами создаем функцию которая умеет диспатчить экшены, но редакс нам позволяет упростить код, просто внося необходимые функции в конект при\r\n// помощи деструктуризации, а редакс после этого уже самостоятельно создаст экшн криейтор и задиспатчит\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         followChange: (id) => {\r\n//             dispatch(followChangedActionCreator(id))\r\n//         },\r\n//         setUsers: (userInfo) => {\r\n//             dispatch(setUsersAC(userInfo))\r\n//         },\r\n//         changePage: (newPage) => {\r\n//             dispatch(setPageAC(newPage))\r\n//         },\r\n//         setTotalUsersCount: (usersCount) => {\r\n//             dispatch(setTotalUsersCountAC(usersCount))\r\n//         },\r\n//         showMore: () => {\r\n//             dispatch(showMoreAC())\r\n//         },\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\nconst UsersContainer = compose(\r\n    connect(mapStateToProps, { getUsersThunkCreator, changePageTC, showMoreTC, changeFollowTC, useSelectorsTC }),\r\n    // withAuthRedirect\r\n)(UsersAPIComponent)\r\n\r\nexport default UsersContainer;"],"names":["User","props","className","style","to","id","src","photo","avatar","alt","disabled","followingInProgress","some","isAuth","onClick","onChangeFollow","follow","name","status","UsersFunc","slicedPages","onChangePage","onShowMore","onUsingSelectors","UserItem","usersInfo","map","item","index","followed","followChanged","photos","small","pagesCount","Math","ceil","totalUsersCount","pageSize","inputValue","React","pages","i","push","curPage","curentPage","slice","Prel","Array","searchUsersInput","useRef","selectorUsersInput","page","e","length","ref","type","placeholder","current","value","Number","usingSelectors","isFetching","Preloader","getUsersInfo","state","usersPage","userInfo","getPageSize","getTotalUsersCount","getCurentPage","getIsFetching","getFollowingInProgress","getIsFollowed","isFollowed","getSearchInputValue","searchInputValue","UsersAPIComponent","newPage","changePageTC","showMoreTC","useSelectorsTC","changeFollowTC","this","getUsersThunkCreator","compose","connect","auth"],"sourceRoot":""}